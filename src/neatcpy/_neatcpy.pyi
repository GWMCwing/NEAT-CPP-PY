"""
NEATCPP Python Bindings
"""
from __future__ import annotations
import typing
__all__ = ['Edge', 'GeneHistory', 'Genome', 'MutationConfig', 'Node', 'Population', 'SpeciesConfig', 'add']
class Edge:
    pass
class GeneHistory:
    pass
class Genome:
    def __init__(self, inputSize: int, outputSize: int, init: bool = ...) -> None:
        ...
    def addCloneEdge(self, edge: Edge) -> bool:
        ...
    def addCloneNode(self, node: Node) -> bool:
        ...
    def addNode_noClone(self, node: Node) -> bool:
        ...
    def clone(self) -> Genome:
        ...
    def disableEdge(self, innovationNumber: int) -> None:
        ...
    def enableEdge(self, innovationNumber: int) -> None:
        ...
    def feedForward(self, inputs: list[float]) -> list[float]:
        ...
    def getEdge(self, innovationNumber: int) -> Edge:
        ...
    def getEdges(self) -> dict[int, Edge]:
        ...
    def getFitness(self) -> float:
        ...
    def getInputSize(self) -> int:
        ...
    def getMaxInnovationNumber(self) -> int:
        ...
    def getNode(self, id: int) -> Node:
        ...
    def getNodes(self) -> dict[int, Node]:
        ...
    def getNumberOfGenes(self) -> int:
        ...
    def getOutputSize(self) -> int:
        ...
    def mutate(self, geneHistory: GeneHistory, mutationConfig: MutationConfig = ...) -> None:
        ...
    def predict(self, inputs: list[float]) -> int:
        ...
    def print(self, tabSize: int = ...) -> None:
        ...
    def setFitness(self, fitness: float) -> None:
        ...
    def toggleEdge(self, innovationNumber: int) -> None:
        ...
class MutationConfig:
    activationMutationChance: float
    biasMutationChance: float
    edgeMutationChance: float
    nodeMutationChance: float
    toggleEdgeMutationChance: float
    weightMutationChance: float
    def __init__(self, nodeMutationChance: float = ..., edgeMutationChance: float = ..., toggleEdgeMutationChance: float = ..., weightMutationChance: float = ..., activationMutationChance: float = ..., biasMutationChance: float = ...) -> None:
        ...
class Node:
    pass
class Population:
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: MutationConfig, arg4: SpeciesConfig) -> None:
        ...
    def getAverageFitnessHistory(self) -> list[float]:
        ...
    def getBestFitnessHistory(self) -> list[float]:
        ...
    def getBestGenomeHistory(self) -> list[Genome]:
        ...
    def getGeneration(self) -> int:
        ...
    def getGenome(self, index: int) -> Genome:
        ...
    def getGenomes(self) -> list[Genome]:
        ...
    def getInputSize(self) -> int:
        ...
    def getMutationConfig(self) -> MutationConfig:
        ...
    def getOutputSize(self) -> int:
        ...
    def getPopulationSize(self) -> int:
        ...
    def getSpeciesConfig(self) -> SpeciesConfig:
        ...
    def getWorstFitnessHistory(self) -> list[float]:
        ...
    def print(self, tabSize: int = ...) -> None:
        ...
    def setMutationConfig(self, mutationConfig: MutationConfig) -> None:
        ...
    def setSpeciesConfig(self, speciesConfig: SpeciesConfig) -> None:
        ...
    @typing.overload
    def startNextGeneration(self) -> list[Genome]:
        ...
    @typing.overload
    def startNextGeneration(self, populationSize: int) -> list[Genome]:
        ...
    @typing.overload
    def startNextGeneration(self, fitnesses: list[float]) -> list[Genome]:
        ...
    @typing.overload
    def startNextGeneration(self, populationSize: int, fitnesses: list[float]) -> list[Genome]:
        ...
class SpeciesConfig:
    c1: float
    c2: float
    c3: float
    threshold: float
    def __init__(self, c1: float = ..., c2: float = ..., c3: float = ..., threshold: float = ...) -> None:
        ...
def add(arg0: int, arg1: int) -> int:
    """
    A function which adds two numbers
    """
